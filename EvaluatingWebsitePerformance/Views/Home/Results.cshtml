@model EvaluatingWebsitePerformance.Models.BaseRequestViewModel
@{
    ViewBag.Title = "Results";
}

@if (Model is null || Model.BaseRequestUrl is null)
{
    <br />
    <h3>Website not found</h3>

    <div>
        &rsaquo; @Html.ActionLink("Back to main page", "Index", "Home")
    </div>
}
else
{
    var i = 1;
    var uri = new Uri(Model.BaseRequestUrl).Host;

    var title = string
        .Concat("Evaluating ", uri, " performance")
        .ToUpper();

    var orderRequests = Model.SitemapRequests
                .OrderBy(c => c.MinResponseTime);

    var namesArr = orderRequests
        .Select(c => c.SitemapRequestUrl)
        .ToArray();

    var minValuesArr = orderRequests
        .Select(c => c.MinResponseTime)
        .ToArray();
    var maxValuesArr = orderRequests
        .Select(c => c.MaxResponseTime)
        .ToArray();

    <br />
    <br />
    <br />
    <h3 class="text-center">@title</h3>

    @*@using EvaluatingWebsitePerformance.Infrastructure.Helpers
        @Html.CreateChart(Model.SitemapRequests)*@

    <div id='myDiv'></div>

    <h3 class="text-center">RESULTS</h3>
    <br />
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">URL</th>
                    <th scope="col">Min response, ms</th>
                    <th scope="col">Max response, ms</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var sitemapUrl in Model.SitemapRequests)
                {
                    var url = sitemapUrl.SitemapRequestUrl;
                    <tr>
                        <th>@i</th>
                        <td class="websiteUrl" title="@url"><a href="@url">@url</a></td>
                        <td>@sitemapUrl.MinResponseTime</td>
                        <td>@sitemapUrl.MaxResponseTime</td>
                    </tr>
                    i++;
                }
            </tbody>
        </table>
    </div>
    <br />
    @Scripts.Render("https://cdn.plot.ly/plotly-latest.min.js")
    <script>
    var nameValues = @Html.Raw(Json.Encode(namesArr));
    var minValues = @Html.Raw(Json.Encode(minValuesArr));
    var maxValues = @Html.Raw(Json.Encode(maxValuesArr));

    var trace1 = {
        x: nameValues,
        y: minValues,
        name: 'Min response',
        marker: { color: 'rgb(121, 217, 161)' },
        type: 'bar'
    };
    var trace2 = {
        x: nameValues,
        y: maxValues,
        name: 'Max response',
        marker: { color: 'rgb(55, 83, 109)' },
        type: 'bar'
    };
    var data = [trace1, trace2];
    var layout = {
        title: '',
        xaxis: {
            tickfont: {
                size: 1,
                color: 'rgb(255, 255, 255)'
            }
        },
        yaxis: {
            title: 'Response time (ms)',
            titlefont: {
                size: 16,
                color: 'rgb(107, 107, 107)'
            },
            tickfont: {
                size: 14,
                color: 'rgb(107, 107, 107)'
            }
        },
        legend: {
            x: 1,
            y: 1.0,
            //bottom
            //x: 0.425,
            //y: -0.2,
            bgcolor: 'rgba(255, 255, 255, 0)',
            bordercolor: 'rgba(255, 255, 255, 0)'
        },
        barmode: 'group',
        bargap: 0.15,
        bargroupgap: 0.1
    };
    Plotly.newPlot('myDiv', data, layout);
    </script>
}